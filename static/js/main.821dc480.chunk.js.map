{"version":3,"sources":["apiClient/baseService.ts","apiClient/resources/users.ts","apiClient/resources/tasks.ts","apiClient/index.ts","config.js","store/mobxHelper.js","store/tasks/task.store.ts","store/tasks/tasks.store.ts","store/users/user.store.ts","store/users/users.store.ts","context/store.context.ts","components/StoreProvider/index.tsx","hooks/index.ts","components/Confirm/index.tsx","components/CrudItem/index.tsx","components/CustomInput/styles.ts","components/CustomInput/index.tsx","components/Users/index.tsx","components/Tasks/index.tsx","components/TodoApp/styles.ts","components/TodoApp/index.tsx","styles.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["BaseService","axiosInstance","resourceUrl","list","requestParams","defaultParams","url","params","rest","get","retrieve","id","requestUrl","create","data","post","update","method","request","delete","this","Users","Tasks","users","tasks","basicResponse","response","axios","baseURL","addResponseInterceptor","callback","interceptors","use","config","BASE_API","async","self","generator","action","loading","flow","asyncAssign","exports","applySnapshot","asyncAssignPath","path","taskStates","TODO","DONE","Task","types","model","identifierNumber","description","string","state","enumeration","Object","values","userId","number","views","actions","assign","mobxHelper","ApiClient","toggle","todoToUpdate","isDone","remove","getParent","TasksStore","array","add","task","todoAdded","push","destroy","User","name","optional","removeUser","select","selectUser","selectedUser","maybe","safeReference","user","listUsers","addUser","userAdded","storeContext","React","createContext","store","Store","StoreProvider","props","children","Provider","value","useFetchStore","useContext","Error","Hooks","useEffect","useStateActions","initalValue","useState","setState","useCallback","memo","open","onClose","onConfirm","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","color","autoFocus","CrudItem","text","onUpdate","onDelete","isSelected","options","icon","showDelete","openDelete","closeDelete","isEdit","changeToEdit","changeToRead","inputValue","setName","onChange","event","target","onDeleteUser","onUpdateUser","Fragment","ListItem","selected","TextField","margin","label","fullWidth","ListItemSecondaryAction","IconButton","aria-label","button","ListItemIcon","ListItemText","primary","Divider","defaultProps","useStyles","makeStyles","theme","root","padding","display","alignItems","marginTop","marginBottom","input","marginLeft","spacing","flex","iconButton","divider","height","placeholder","classes","setValue","onAddClick","a","Paper","component","className","elevation","InputBase","orientation","disabled","observer","Typography","variant","LinearProgress","List","map","key","addTask","taskOwner","Checkbox","checked","inputProps","content","flexDirection","borderWidth","borderColor","toolbar","mixins","mainContainer","initialize","App","AppBar","Toolbar","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.821dc480.chunk.js","sourcesContent":["// Dependencies\nimport { AxiosInstance, AxiosRequestConfig } from 'axios';\n\n/**\n * Base service for http request.\n * @author Daniel Mejia\n */\nclass BaseService {\n  /**\n   * The axios instance to make http request.\n   */\n  axiosInstance: AxiosInstance;\n\n  /**\n   * The default resourceUrl to get values.\n   */\n  resourceUrl!: string;\n\n  /**\n   * Creates an instance of BaseService.\n   */\n  constructor(axiosInstance: AxiosInstance) {\n    this.axiosInstance = axiosInstance;\n  }\n\n  /**\n    * Make a get request.\n    * @param { Object } [requestParams=this.defaultParams] The params to make the request.\n    * @return The data promise.\n   */\n  list = <T>(requestParams: AxiosRequestConfig = this.defaultParams): Promise<T> => {\n    const { url = this.resourceUrl, params, ...rest } = requestParams;\n    return this.axiosInstance.get(url, { params, ...rest });\n  }\n\n  /**\n   * Make a get request by id resourceUrl.\n   * @param id The id to find by.\n   * @param { Object } [requestParams=this.defaultParams] The params to make the request.\n   * @return The data promise.\n   */\n  retrieve = (id: number, requestParams: AxiosRequestConfig = this.defaultParams) => {\n    const { url = this.resourceUrl, ...rest } = requestParams;\n    const requestUrl = `${url}/${id}`;\n    return this.axiosInstance.get(requestUrl, { ...rest });\n  }\n\n  /**\n   * Make a post request with data.\n   * @param { Object } [data={}] The data to send as body.\n   * @param { Object } [requestParams=this.defaultParams] The params to make the request.\n   * @return The data promise.\n   */\n  create = <T>(data: T, requestParams: AxiosRequestConfig = this.defaultParams): Promise<T> => {\n    const { url = this.resourceUrl, ...rest } = requestParams;\n    return this.axiosInstance.post(url, data, { ...rest });\n  }\n\n  /**\n   * Make a put or patch request with data.\n   * @param id The id to update by.\n   * @param data The instance to update.\n   * @param { Object } [requestParams=this.defaultParams] The params to make the request.\n   * @return The data promise.\n   */\n  update = <T>(id: number, data: T, requestParams: AxiosRequestConfig = this.defaultParams): Promise<T> => {\n    const { url = this.resourceUrl, method = 'patch', ...rest } = requestParams;\n    const requestUrl = `${url}/${id}`;\n    return this.axiosInstance.request({ url: requestUrl, data, method, ...rest });\n  }\n\n  /**\n  * Make a get request by id to delete a item.\n  * @param id The id to find by.\n  * @param { Object } [requestParams=this.defaultParams] The params to make the request.\n  * @return The data promise.\n  */\n  delete = (id: number, requestParams: AxiosRequestConfig = this.defaultParams) => {\n    const { url = this.resourceUrl, ...rest } = requestParams;\n    const requestUrl = `${url}/${id}`;\n    return this.axiosInstance.delete(requestUrl, { ...rest });\n  }\n\n  /**\n   * Getter for default request params.\n   * @readonly\n   * @returns { object } The default request params.\n   */\n  get defaultParams(): AxiosRequestConfig {\n    return {\n      url: this.resourceUrl,\n    };\n  }\n}\n\nexport default BaseService;\n","// Depedencies\nimport BaseService from '../baseService';\n\n/**\n * Users resource manager.\n * @author Daniel Mejia\n */\nexport class Users extends BaseService {\n  /**\n   * Resource url.\n   */\n  resourceUrl: string = 'users';\n}\n\nexport default Users;\n","// Depedencies\nimport BaseService from '../baseService';\n\n/**\n * Tasks resource manager.\n * @author Daniel Mejia\n */\nexport class Tasks extends BaseService {\n  /**\n   * Resource url.\n   */\n  resourceUrl: string = 'users_tasks';\n}\n\nexport default Tasks;\n","// Depedencies\nimport axios, { AxiosInstance, AxiosResponse } from 'axios';\n\n// Resources\nimport { Users } from './resources/users';\nimport { Tasks } from './resources/tasks';\n\n/**\n * Definition of request interceptor to set for axios instance.\n */\nexport type RequestInterceptor = (response: AxiosResponse) => AxiosResponse<unknown> | Promise<AxiosResponse<unknown>>;\n\n/**\n * Api client manager.\n * @author Daniel Mejia\n */\nexport class ApiClient {\n  /**\n   * The axios instance to execute api calls.\n   */\n  axiosInstance!: AxiosInstance;\n\n  /**\n   * The client to manage users resource.\n   */\n  users!: Users;\n\n  /**\n   * The client to manage tasks resource.\n   */\n  tasks!: Tasks;\n\n  /**\n   * Initialze the stripe client base on url.\n   * @param url The url to backend requiests.\n   */\n  initialize(url: string) {\n    this.axiosInstance = axios.create({ baseURL: url });\n    this.addResponseInterceptor(this.basicResponse);\n    this.users = new Users(this.axiosInstance);\n    this.tasks = new Tasks(this.axiosInstance);\n\n    return this;\n  }\n\n  /**\n   * Add a response interceptor for client.\n   * @param callback The callback to add.\n   * @returns The stripe client itself.\n   */\n  addResponseInterceptor(callback: RequestInterceptor): ApiClient {\n    const { interceptors } = this.axiosInstance;\n    interceptors.response.use(callback);\n    return this;\n  }\n\n  /**\n   * Intercepts every response.\n   * @param response The response.\n   * @returns The new response parsed.\n   */\n  basicResponse = <T>(response: AxiosResponse<T>): T => response.data;\n}\n\nexport default new ApiClient();","/**\n * Global variables configuration.\n */\nconst config = {\n  BASE_API: 'http://localhost:5000/', \n};\n\nexport default config;","// Dependencies\nimport { flow, applySnapshot } from 'mobx-state-tree';\n\n/**\n * Manage an async actions with loading and errors.\n * @param { Promise<object> } data The async data.\n * @param { object } self The self reference.\n * @param { Function } [action] Callback to executed with success data.\n */\nexport function async(data, self, action = (response) => response) {\n  function* generator() {\n    try {\n      self.loading = true;\n      const response = yield data;\n      return action(response);\n    } finally {\n      self.loading = false;\n    }\n  }\n\n  return flow(generator)();\n}\n\n/**\n * Make an async action to mobx state tree and assign to given self.\n * @param { Promise<object> } data The async data.\n * @param { object } self The self reference.\n */\nexport const asyncAssign = (data, self) => exports.async(data, self, (response) => {\n  applySnapshot(self, response);\n  return self;\n});\n\n/**\n * Make an async action to mobx state tree and assign to given self path.\n * @param { Promise<object> } data The async data\n * @param { object } self The self reference.\n */\nexport const asyncAssignPath = (data, self, path) => exports.async(data, self, (response) => {\n  self[path] = response;\n  return self[path];\n});\n\nconst exports = {\n  async,\n  asyncAssign,\n  asyncAssignPath,\n}\n\nexport default exports;\n","// Dependencies\nimport { types, Instance, getParent } from 'mobx-state-tree';\n\n// Helper\nimport * as mobxHelper from '../mobxHelper';\n\n// Api Client\nimport ApiClient from '../../apiClient';\n\n/**\n * The avaiables states for a stask.\n */\nexport const taskStates = {\n  TODO: 'todo',\n  DONE: 'done',\n};\n\n/**\n * Definition for todo store.\n */\nexport const Task = types\n  .model('Task', {\n    id: types.identifierNumber,\n    description: types.string,\n    state: types.enumeration(Object.values(taskStates)),\n    userId: types.number,\n  })\n  .views((self) => ({\n    /**\n     * Calculates if the item is done.\n     * @returns true if the item is done, false otherwise.\n     */\n    get isDone() {\n      return self.state === taskStates.DONE;\n    }\n  }))\n  .actions((self) => ({\n   /**\n    * Updates a task.\n    * @param params The task update params.\n    * @return The task updated.\n    */\n    update(params: Partial<ITask>) {\n      Object.assign(self, params)\n      return mobxHelper.asyncAssign(ApiClient.tasks.update(self.id, params), self)\n    },\n\n    /**\n     * Toggle the task state.\n     */\n    toggle() {\n      const { isDone } = self;\n      const todoToUpdate = { state: isDone ? taskStates.TODO : taskStates.DONE };\n      Object.assign(self, todoToUpdate)\n      return mobxHelper.asyncAssign(ApiClient.tasks.update(self.id, todoToUpdate), self)\n    },\n\n    /**\n     * Remove a task.\n     */\n    remove() {\n      const { remove } = getParent(self, 2);\n      remove(self)\n    },\n  }))\n\n/**\n * Definition type for {@link Task}.\n */\nexport interface ITask extends Instance<typeof Task> { }\n\nexport default Task;","// Dependencies\nimport { types, Instance, flow, destroy } from 'mobx-state-tree';\n\n// Helper\nimport * as mobxHelper from '../mobxHelper';\n\n// Api Client\nimport ApiClient from '../../apiClient';\n\n// Store\nimport Task, { ITask, taskStates } from './task.store';\n\n/**\n * Definition for tasks store.\n */\nconst TasksStore = types\n  .model('TasksStore', {\n    data: types.array(Task),\n    loading: false,\n  })\n  .actions((self) => ({\n    /**\n     * Fetch task for a given user from server.\n     * @param userId The user owner identifier.\n     * @returns The task response.\n     */\n    list(userId: number) {\n      return mobxHelper.asyncAssign(ApiClient.tasks.list({ params: { userId } }), self);\n    },\n\n    /**\n     * Add a task for a given user.\n     * @param userId The user owner identifier.\n     * @returns The task response.\n     */\n    add: flow(function* (userId: number, task: Partial<ITask>) {\n      self.loading = true;\n      const todoAdded = yield ApiClient.tasks.create({ ...task, state: taskStates.TODO, userId });\n      self.data.push(todoAdded);\n      self.loading = false;\n      return self.data;\n    }),\n\n    /**\n     * Removes the user from server.\n     * @param user The user to remove.\n     * @returns The list of users. \n     */\n    remove: flow(function* (task: ITask) {\n      self.loading = true\n      yield ApiClient.tasks.delete(task.id);\n      destroy(task);\n      self.loading = false;\n      return self.data;\n    }),\n  }));\n\n/**\n * Definition type for {@link TasksStore}.\n */\nexport interface ITasks extends Instance<typeof TasksStore> { };\n\nexport default TasksStore;","// Depedencies\nimport { types, Instance, getParent } from 'mobx-state-tree';\n\n// Store\nimport Tasks from '../tasks/tasks.store';\n\n// Helper\nimport * as mobxHelper from '../mobxHelper';\n\n// Api Client\nimport ApiClient from '../../apiClient';\n\n/**\n * Definition for user store.\n */\nexport const User = types\n  .model('User', {\n    id: types.identifierNumber,\n    name: types.string,\n    tasks: types.optional(Tasks, {}),\n  }).actions((self) => ({\n   /**\n    * Updates a user.\n    * @param params The user update param.\n    * @return The user update.d\n    */\n    update(params: Partial<IUser>) {\n      Object.assign(self, params)\n      return mobxHelper.async(ApiClient.users.update(self.id, params), self)\n    },\n\n    /**\n     * Remove the user.\n     */\n    remove() {\n      const { removeUser } = getParent(self, 2);\n      removeUser(self)\n    },\n\n    /**\n     * Mark the user as selected.\n     */\n    select() {\n      const { selectUser } = getParent(self, 2);\n      selectUser(self);\n    },\n  }));\n\n/**\n * Definition type for {@link User}.\n */\nexport interface IUser extends Instance<typeof User> { }\n\nexport default User;","// Dependencies\nimport { types, Instance, flow, destroy } from 'mobx-state-tree';\n\n// Helper\nimport * as mobxHelper from '../mobxHelper';\n\n// Stores\nimport User, { IUser } from './user.store';\n\n// Api Client\nimport ApiClient from '../../apiClient';\n\n/**\n * Definition for users store.\n */\nconst Users = types\n  .model('Users', {\n    data: types.array(User),\n    selectedUser: types.maybe(types.safeReference(User)),\n    loading: false,\n  }).actions((self) => ({\n    /**\n     * Marks a user as selected.\n     * @param user The user to select.\n     */\n    selectUser(user: IUser) {\n      self.selectedUser = user;\n    },\n\n    /**\n     * List the users from server.\n     * @returns The list of users.\n     */\n    listUsers() {\n      return mobxHelper.asyncAssign(ApiClient.users.list(), self);\n    },\n\n    /**\n     * Add a new user to the server.\n     * @param user The user to add.\n     * @returns The list of users.\n     */\n    addUser: flow(function* (user: Partial<IUser>) {\n      self.loading = true\n      const userAdded = yield ApiClient.users.create(user);\n      self.data.push(userAdded);\n      self.loading = false;\n      return self.data;\n    }),\n\n    /**\n     * Removes the user from server.\n     * @param user The user to remove.\n     * @returns The list of users. \n     */\n    removeUser: flow(function* (user: IUser) {\n      self.loading = true\n      yield ApiClient.users.delete(user.id);\n      destroy(user);\n      self.loading = false;\n      return self.data;\n    }),\n  }));\n\n/**\n * Definition type for {@link Users}.\n */\nexport interface IUserStore extends Instance<typeof Users> { };\n\nexport default Users;","// Dependencies\nimport React from 'react'\n\n// Store\nimport { IUserStore } from '../store/users/users.store'\n\n/**\n * Context for Store app.\n */\nconst storeContext = React.createContext<IUserStore | null>(null);\n\nexport default storeContext;\n","// Dependencies\nimport React from 'react'\n\n// Store\nimport Store from '../../store/users/users.store';\n\n// Context\nimport StoreContext from '../../context/store.context';\n\n// Store instance\nconst store = Store.create();\n\n/**\n * Props definition for {@link StoreProvider}\n */\nexport interface StoreProviderProps {\n  children: React.ReactNode;\n}\n\n/**\n * Store provider component to share using react context.\n * @param props The store properties\n * @returns The store component.\n */\nexport function StoreProvider(props: StoreProviderProps): React.ReactElement {\n  const { children } = props;\n\n  return (\n    <StoreContext.Provider value={store}>\n      {children}\n    </StoreContext.Provider>\n  )\n}\n\nexport default StoreProvider;\n","// Dependencies\nimport React from 'react'\n\n// Hooks\nimport * as Hooks from './index';\n\n// Context\nimport storeContext from '../context/store.context';\n\n// Dtos\nimport { IUserStore } from '../store/users/users.store';\n\n/**\n * Hook to use the store in any component.\n * @returns The store provided.\n */\nexport function useStore(): IUserStore {\n  const store = React.useContext(storeContext)\n\n  if (store) {\n    return store\n  }\n\n  throw new Error('useStore must be used within a StoreProvider.')\n}\n\n/**\n * Use the store fetching the data from server.\n * @returns The store and data fetched.\n */\nexport function useFetchStore() {\n  const store = Hooks.useStore();\n  const { listUsers, selectedUser } = store;\n  React.useEffect(() => void listUsers(), [listUsers]);\n  React.useEffect(() => void selectedUser?.tasks.list(selectedUser.id), [selectedUser])\n\n  return store;\n}\n\n/**\n * A hook to generate basic logic to manage a state with actions.\n * @param initalValue The initial state value for state.\n * @returns The state of modal and the memoize actions to manage it.\n */\nexport function useStateActions(initalValue?: boolean): [boolean, () => void, () => void] {\n  const [state, setState] = React.useState(!!initalValue);\n  const setTruthy = React.useCallback(() => setState(true), []);\n  const setFalsy = React.useCallback(() => void setState(false), []);\n\n  return [state, setTruthy, setFalsy];\n}\n","// Dependencies\nimport React from 'react';\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core';\n\n/**\n * The properties definition for {@link Confirm}\n */\nexport interface ConfirmProps {\n  /**\n   * Check if modal is open.\n   */\n  open: boolean;\n\n  /**\n   * Callback to on close.\n   */\n  onClose: () => void;\n\n  /**\n   * Callback to on confirm.\n   */\n  onConfirm: () => void;\n}\n\n/**\n * Confirm modal component.\n * @param props The properties of component.\n * @returns The modal confirm component.\n */\nexport function Confirm(props: ConfirmProps): React.ReactElement {\n  const { open, onClose, onConfirm } = props;\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">Warning</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Are you sure you want to delete?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"secondary\">Cancel</Button>\n        <Button onClick={onConfirm} color=\"primary\" autoFocus>Confirm</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default React.memo(Confirm);","// Dependencies\nimport React from 'react';\nimport { ListItem, ListItemSecondaryAction, IconButton, ListItemText, Divider, ListItemIcon } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/DeleteForever';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport TextField from '@material-ui/core/TextField';\n\n// Hooks\nimport { useStateActions } from '../../hooks';\n\n// Components\nimport Confirm from '../Confirm';\n\n/**\n * The properties definition for {@link Item}\n */\nexport interface CrudItemProps {\n  text: string;\n  isSelected: boolean;\n  onClick?: () => void;\n  onDelete: () => void;\n  onUpdate: (inputValue: string) => void;\n  options?: React.ReactNode\n  icon: React.ReactNode,\n}\n\n/**\n * A component to render a item row with crud operations.\n * @param props The properties of component.\n * @returns The component.\n */\nexport function CrudItem(props: CrudItemProps): React.ReactElement {\n  const { text, onClick, onUpdate, onDelete, isSelected, options, icon } = props;\n  const [showDelete, openDelete, closeDelete] = useStateActions();\n  const [isEdit, changeToEdit, changeToRead] = useStateActions();\n  const [inputValue, setName] = React.useState(text);\n\n  const onChange = React.useCallback((event) => {\n    const { target } = event;\n    setName(target.value);\n  }, []);\n\n  const onDeleteUser = React.useCallback(() => {\n    closeDelete();\n    onDelete();\n  }, [onDelete, closeDelete]);\n\n  const onUpdateUser = React.useCallback(() => {\n    onUpdate(inputValue);\n    changeToRead();\n  }, [onUpdate, inputValue, changeToRead])\n\n  return (\n    <React.Fragment>\n      {\n        isEdit\n          ? (\n            <ListItem selected={isSelected}>\n              <TextField\n                autoFocus\n                margin=\"dense\"\n                label=\"New value\"\n                fullWidth\n                value={inputValue}\n                onChange={onChange}\n              />\n              <ListItemSecondaryAction>\n                <IconButton aria-label=\"save\" onClick={onUpdateUser}>\n                  <SaveIcon />\n                </IconButton>\n                <IconButton aria-label=\"read\" onClick={changeToRead}>\n                  <CancelIcon />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ) : (\n            <ListItem button onClick={onClick} selected={isSelected}>\n              <ListItemIcon>{icon}</ListItemIcon>\n              <ListItemText primary={text} />\n              <ListItemSecondaryAction>\n                {options}\n                <IconButton aria-label=\"edit\" onClick={changeToEdit}>\n                  <EditIcon />\n                </IconButton>\n                <IconButton aria-label=\"delete\" onClick={openDelete}>\n                  <DeleteIcon />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          )\n      }\n      <Divider />\n      <Confirm open={showDelete} onClose={closeDelete} onConfirm={onDeleteUser} />\n    </React.Fragment>\n  );\n}\n\n/**\n * Default props of component.\n */\nCrudItem.defaultProps = {\n  isSelected: false,\n};\n\nexport default React.memo(CrudItem);","// Dependencies\nimport { makeStyles, Theme } from '@material-ui/core/styles';\n\n/**\n * Styles definition for component.\n */\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 10,\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    height: 28,\n    margin: 4,\n  },\n}));\n\nexport default useStyles;","// Dependencies\nimport React from 'react';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport { InputBase, Paper, IconButton, Divider } from '@material-ui/core';\n\n// Styles\nimport useStyles from './styles';\n\n/**\n * The properties definition for {@link CustomInput}\n */\nexport interface CustomInputProps {\n  /**\n   * Callback to execute on input button press.\n   */\n  onClick: (inputValue: string) => Promise<void> | void;\n\n  /**\n   * The placeholder for input field.\n   */\n  placeholder: string;\n}\n\n/**\n * Custom input component to manage a field.\n * @param props The properties of component.\n * @returns The custom component.\n */\nexport function CustomInput(props: CustomInputProps): React.ReactElement {\n  const { onClick, placeholder } = props;\n  const classes = useStyles();\n\n  const [inputValue, setValue] = React.useState('');\n  const onChange = React.useCallback((event) => {\n    const { target } = event;\n    setValue(target.value);\n  }, [])\n  const onAddClick = React.useCallback(async () => {\n    await onClick(inputValue);\n    setValue('')\n  }, [onClick, inputValue]);\n\n  return (\n    <Paper component=\"form\" className={classes.root} elevation={3} >\n      <InputBase\n        className={classes.input}\n        placeholder={placeholder}\n        onChange={onChange}\n        value={inputValue}\n      />\n      <Divider className={classes.divider} orientation=\"vertical\" />\n      <IconButton\n        color=\"primary\"\n        className={classes.iconButton}\n        onClick={onAddClick}\n        disabled={!inputValue}\n      >\n        <AddCircle />\n      </IconButton>\n    </Paper>\n  );\n}\n\nexport default React.memo(CustomInput);","// Dependencies\nimport React from 'react'\nimport { List, Typography, LinearProgress } from '@material-ui/core';\nimport { observer } from 'mobx-react';\nimport UserIcon from '@material-ui/icons/AccountCircle';\n\n// Components\nimport CrudItem from '../CrudItem';\nimport CustomInput from '../CustomInput';\n\n// Dto\nimport { IUser } from '../../store/users/user.store';\n\n/**\n * Properties definition for {@link Users}\n */\nexport interface UsersProps {\n  /**\n   * Callback to add a user.\n   */\n  addUser: (user: Partial<IUser>) => void;\n\n  /**\n   * Flag to indicate if loader is on progress.\n   */\n  loading: boolean;\n\n  /**\n   * The selected user.\n   */\n  selectedUser?: IUser;\n\n  /**\n   * The users list.\n   */\n  data: IUser[]\n}\n\n/**\n * A component to render the users view.\n * @param props The properties of component.\n * @returns The component.\n */\nexport function Users(props: UsersProps): React.ReactElement {\n  const { addUser, loading, selectedUser, data } = props;\n  const onAddClick = React.useCallback((name) => addUser({ name }), [addUser]);\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h4\">Users</Typography>\n      <CustomInput onClick={onAddClick} placeholder=\"Type user name\" />\n      {loading && <LinearProgress />}\n      <List>\n        {\n          data.map((user: IUser) => (\n            <CrudItem\n              key={user.id}\n              icon={<UserIcon />}\n              text={user.name}\n              onClick={user.select}\n              isSelected={selectedUser?.id === user.id}\n              onUpdate={(name: string) => user.update({ name })}\n              onDelete={user.remove}\n            />\n          ))\n        }\n      </List>\n    </React.Fragment>\n  )\n}\n\nexport default observer(Users);","// Dependencies\nimport React from 'react'\nimport { List, Typography, LinearProgress } from '@material-ui/core';\nimport { observer } from 'mobx-react';\nimport TaskIcon from '@material-ui/icons/Assignment';\nimport { Checkbox } from '@material-ui/core';\n\n// Dto\nimport { ITask } from '../../store/tasks/task.store';\nimport { IUser } from '../../store/users/user.store';\n\n// Components\nimport CrudItem from '../CrudItem';\nimport CustomInput from '../CustomInput';\n\n/**\n * Properties definition for {@link Users}\n */\nexport interface TasksProps {\n  /**\n   * Callback to add a task.\n   */\n  addTask: (id: number, task: Partial<ITask>) => void;\n\n  /**\n   * Flag to indicate if loader is on progress.\n   */\n  loading: boolean;\n\n  /**\n   * The task owner.\n   */\n  taskOwner: IUser;\n\n  /**\n   * The task list.\n   */\n  data: ITask[]\n}\n\n/**\n * A component to render the users view.\n * @param props The properties of component.\n * @returns The component.\n */\nexport function Tasks(props: TasksProps): React.ReactElement {\n  const { addTask, loading, data, taskOwner } = props;\n  const onAddClick = React.useCallback((description) => addTask(taskOwner.id, { description }), [addTask, taskOwner]);\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h4\">Tasks</Typography>\n      <CustomInput onClick={onAddClick} placeholder=\"Type task description\" />\n      {loading && <LinearProgress />}\n      <List>\n        {\n          data.map((task: ITask) => (\n            <CrudItem\n              key={task.id}\n              text={task.description}\n              onUpdate={(description) => task.update({ description })}\n              onDelete={task.remove}\n              icon={<TaskIcon />}\n              options={[\n                <Checkbox\n                  key='toggle'\n                  checked={task.isDone}\n                  onChange={task.toggle}\n                  inputProps={{ 'aria-label': 'primary checkbox' }}\n                />\n              ]}\n            />\n          ))\n        }\n      </List>\n    </React.Fragment>\n  )\n}\n\nexport default observer(Tasks);","// Dependencies\nimport { makeStyles, Theme } from '@material-ui/core';\n\n/**\n * The styles for component.\n */\nconst useStyles = makeStyles((theme: Theme) => ({\n  content: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'row',\n  },\n  users: {\n    flex: 1,\n    padding: 20,\n    borderWidth: 2,\n    borderColor: 'gray',\n  },\n  tasks: {\n    flex: 3,\n    padding: 20,\n  }\n}));\n\nexport default useStyles;\n","// Dependencies\nimport React from 'react';\nimport { observer } from 'mobx-react';\n\n// Components\nimport Users from '../Users';\nimport Tasks from '../Tasks';\n\n// Hooks\nimport * as Hooks from '../../hooks';\n\n// Styles\nimport useStyles from './styles';\n\n/**\n * The todo app container.\n * @returs The todo app component.\n */\nexport function TodoApp(): React.ReactElement {\n  const store = Hooks.useFetchStore();\n  const classes = useStyles();\n\n  return (\n    <main className={classes.content}>\n      <div className={classes.users}>\n        <Users\n          loading={store.loading}\n          data={store.data}\n          addUser={store.addUser}\n          selectedUser={store.selectedUser}\n        />\n      </div>\n      <div className={classes.tasks}>\n        {\n          store.selectedUser && (\n            <Tasks\n              taskOwner={store.selectedUser}\n              data={store.selectedUser.tasks.data}\n              loading={store.selectedUser.tasks.loading}\n              addTask={store.selectedUser.tasks.add}\n            />\n          )\n        }\n      </div>\n    </main >\n  );\n}\n\nexport default observer(TodoApp)\n","// Dependencies\nimport { makeStyles } from '@material-ui/core/styles';\n\n/**\n * The global app styles.\n */\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: theme.mixins.toolbar,\n  mainContainer: {\n    flex: 1,\n  }\n}));\n\nexport default useStyles;\n","// Dependencies\nimport React, { ReactElement } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n// Api Client\nimport ApiClient from './apiClient';\nimport config from './config';\n\n// Components\nimport StoreProvider from './components/StoreProvider';\nimport TodoApp from './components/TodoApp';\n\n// Styles\nimport useStyles from './styles';\n\n// Api Client initialization\nApiClient.initialize(config.BASE_API)\n\n/**\n * Root application component.\n * @returns The root aplication.\n */\nexport function App(): ReactElement {\n  const classes = useStyles();\n\n  return (\n    <StoreProvider>\n      <div className={classes.root}>\n        <AppBar>\n          <Toolbar>\n            <Typography variant=\"h6\">Todo App</Typography>\n          </Toolbar>\n        </AppBar>\n        <main className={classes.mainContainer}>\n          <div className={classes.toolbar} />\n          <TodoApp />\n        </main>\n      </div>\n    </StoreProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Dependencies\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'mobx-react-lite/batchingForReactDom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}